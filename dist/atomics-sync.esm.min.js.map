{"version":3,"file":"atomics-sync.esm.min.js","sources":["../es/errors.js","../es/limits.js","../es/mutex.js","../es/semaphore.js","../es/condition.js","../es/barrier.js","../es/spinlock.js","../es/once.js"],"sourcesContent":["/**\n * Error thrown when a deadlock situation is detected in synchronization primitives.\n * This typically occurs when threads are circularly waiting for resources/locks\n * held by each other.\n */\nexport class DeadlockError extends Error {\n    constructor(message) {\n        super(message);\n        this.name = \"DeadlockError\";\n    }\n}\n/**\n * Error thrown when a thread attempts an operation it doesn't have permission for,\n * such as unlocking a mutex it doesn't own or accessing protected resources.\n */\nexport class PermissionError extends Error {\n    constructor(message) {\n        super(message);\n        this.name = \"PermissionError\";\n    }\n}\n/**\n * Error thrown when invalid arguments or operations are detected,\n * such as passing non-integer values where integers are required,\n * or attempting operations on improperly initialized objects.\n */\nexport class InvalidError extends Error {\n    constructor(message) {\n        super(message);\n        this.name = \"InvalidError\";\n    }\n}\n//# sourceMappingURL=errors.js.map","/**\n * The maximum safe 32-bit signed integer value (2^31 - 1).\n * This is the largest value that can be stored in an Int32Array or similar typed array.\n * Useful for boundary checking in integer operations.\n */\nexport const INT32_MAX_VALUE = 2147483647;\n/**\n * The minimum safe 32-bit signed integer value (-2^31).\n * This is the smallest value that can be stored in an Int32Array or similar typed array.\n * Useful for boundary checking in integer operations.\n */\nexport const INT32_MIN_VALUE = -2147483648;\n//# sourceMappingURL=limits.js.map","import { DeadlockError, InvalidError, PermissionError } from \"./errors.js\";\nimport { INT32_MAX_VALUE, INT32_MIN_VALUE } from \"./limits.js\";\nconst { compareExchange, wait, notify, store, load } = Atomics;\n/**\n * A mutual exclusion lock implementation for thread synchronization.\n * Uses SharedArrayBuffer and Atomics for cross-thread operations.\n * Provides basic lock/unlock functionality with additional timed and try variants.\n * Tracks owning thread to prevent deadlocks and enforce proper usage.\n */\nexport class Mutex {\n    /**\n     * Initializes a new mutex in shared memory\n     * @returns A new Int32Array backed by SharedArrayBuffer with:\n     *          - index 0: state (initially unlocked)\n     *          - index 1: owner (initially empty)\n     */\n    static init() {\n        const mutex = new Int32Array(new SharedArrayBuffer(Int32Array.BYTES_PER_ELEMENT * 2));\n        store(mutex, Mutex.INDEX_STATE, Mutex.STATE_UNLOCKED);\n        store(mutex, Mutex.INDEX_OWNER, Mutex.OWNER_EMPTY);\n        return mutex;\n    }\n    /**\n     * Acquires the mutex, blocking until available\n     * @param mutex The mutex to lock\n     * @param threadId Unique identifier for the calling thread\n     * @throws {DeadlockError} If thread already owns the mutex\n     * @throws {InvalidError} If threadId is invalid\n     */\n    static lock(mutex, threadId) {\n        Mutex.checkThreadIdBeforeLock(mutex, threadId);\n        // Spin-wait loop with atomic compare-exchange\n        for (;;) {\n            // Attempt atomic acquisition\n            if (compareExchange(mutex, Mutex.INDEX_STATE, Mutex.STATE_UNLOCKED, Mutex.STATE_LOCKED) === Mutex.STATE_UNLOCKED) {\n                store(mutex, Mutex.INDEX_OWNER, threadId);\n                return;\n            }\n            // Wait efficiently if mutex is locked\n            wait(mutex, Mutex.INDEX_STATE, Mutex.STATE_LOCKED);\n        }\n    }\n    /**\n     * Attempts to acquire the mutex with a timeout\n     * @param mutex The mutex to lock\n     * @param threadId Unique identifier for the calling thread\n     * @param timestamp Absolute timeout timestamp in milliseconds\n     * @returns true if lock acquired, false if timed out\n     * @throws {DeadlockError} If thread already owns the mutex\n     * @throws {InvalidError} If threadId is invalid\n     */\n    static timedLock(mutex, threadId, timestamp) {\n        Mutex.checkThreadIdBeforeLock(mutex, threadId);\n        for (;;) {\n            if (compareExchange(mutex, Mutex.INDEX_STATE, Mutex.STATE_UNLOCKED, Mutex.STATE_LOCKED) === Mutex.STATE_UNLOCKED) {\n                store(mutex, Mutex.INDEX_OWNER, threadId);\n                return true;\n            }\n            const timeout = timestamp - Date.now();\n            const waitResult = wait(mutex, Mutex.INDEX_STATE, Mutex.STATE_LOCKED, timeout);\n            if (waitResult === \"timed-out\") {\n                return false;\n            }\n        }\n    }\n    /**\n     * Attempts to acquire the mutex without blocking\n     * @param mutex The mutex to lock\n     * @param threadId Unique identifier for the calling thread\n     * @returns true if lock acquired, false if mutex was busy\n     * @throws {DeadlockError} If thread already owns the mutex\n     * @throws {InvalidError} If threadId is invalid\n     */\n    static tryLock(mutex, threadId) {\n        Mutex.checkThreadIdBeforeLock(mutex, threadId);\n        if (compareExchange(mutex, Mutex.INDEX_STATE, Mutex.STATE_UNLOCKED, Mutex.STATE_LOCKED) === Mutex.STATE_UNLOCKED) {\n            store(mutex, Mutex.INDEX_OWNER, threadId);\n            return true;\n        }\n        return false;\n    }\n    /**\n     * Releases the mutex\n     * @param mutex The mutex to unlock\n     * @param threadId Unique identifier for the calling thread\n     * @throws {PermissionError} If thread doesn't own the mutex or mutex wasn't locked\n     * @throws {InvalidError} If threadId is invalid\n     */\n    static unlock(mutex, threadId) {\n        Mutex.checkThreadIdIsValid(threadId);\n        // Verify ownership\n        if (load(mutex, Mutex.INDEX_OWNER) !== threadId) {\n            throw new PermissionError(\"current thread is not owner of mutex\");\n        }\n        // Clear owner first to prevent race conditions\n        store(mutex, Mutex.INDEX_OWNER, Mutex.OWNER_EMPTY);\n        // Verify locked state while unlocking\n        if (compareExchange(mutex, Mutex.INDEX_STATE, Mutex.STATE_LOCKED, Mutex.STATE_UNLOCKED) === Mutex.STATE_UNLOCKED) {\n            throw new PermissionError(\"mutex was not locked\");\n        }\n        // Wake one waiting thread\n        notify(mutex, Mutex.INDEX_STATE, 1);\n    }\n    /**\n     * Validates threadId and checks for deadlock conditions before locking\n     * @param mutex The mutex being locked\n     * @param threadId The thread attempting to lock\n     * @throws {DeadlockError} If thread already owns mutex\n     * @throws {InvalidError} If threadId is invalid\n     */\n    static checkThreadIdBeforeLock(mutex, threadId) {\n        Mutex.checkThreadIdIsValid(threadId);\n        if (load(mutex, Mutex.INDEX_OWNER) === threadId) {\n            throw new DeadlockError(\"thread already owns this mutex\");\n        }\n    }\n    /**\n     * Validates that a threadId is properly formatted and within range\n     * @param threadId The thread ID to validate\n     * @throws {InvalidError} If threadId is not an integer or is empty\n     * @throws {RangeError} If threadId is outside int32 range\n     */\n    static checkThreadIdIsValid(threadId) {\n        if (!Number.isInteger(threadId)) {\n            throw new InvalidError(\"threadId should be int32\");\n        }\n        if (threadId < INT32_MIN_VALUE || threadId > INT32_MAX_VALUE) {\n            throw new RangeError(\"threadId is out of int32 range\");\n        }\n        if (threadId === Mutex.OWNER_EMPTY) {\n            throw new InvalidError(\"threadId is empty owner\");\n        }\n    }\n}\n// Constants for mutex state management\nMutex.OWNER_EMPTY = 0; // Value indicating no owner\nMutex.STATE_UNLOCKED = 0; // Mutex is available\nMutex.STATE_LOCKED = 1; // Mutex is acquired\nMutex.INDEX_STATE = 0; // Index for state in array\nMutex.INDEX_OWNER = 1; // Index for owner in array\n//# sourceMappingURL=mutex.js.map","import { InvalidError } from \"./errors.js\";\nimport { INT32_MAX_VALUE } from \"./limits.js\";\nconst { compareExchange, wait, notify, store, load } = Atomics;\n/**\n * A counting semaphore implementation for thread synchronization.\n * Controls access to shared resources with a counter that atomically tracks available permits.\n * Supports blocking, timed, and non-blocking acquisition of permits.\n */\nexport class Semaphore {\n    /**\n     * Initializes a new semaphore with the specified initial value\n     * @param value Initial number of available permits (must be non-negative integer)\n     * @returns A new Int32Array backed by SharedArrayBuffer\n     * @throws {InvalidError} If value is not an integer\n     * @throws {RangeError} If value is negative or exceeds INT32_MAX_VALUE\n     */\n    static init(value) {\n        if (!Number.isInteger(value)) {\n            throw new InvalidError(\"initial value should be int32\");\n        }\n        if (value < 0 || value > INT32_MAX_VALUE) {\n            throw new RangeError(\"initial value should be greater or equal zero and less or equal maximum int32 value\");\n        }\n        const sem = new Int32Array(new SharedArrayBuffer(Int32Array.BYTES_PER_ELEMENT));\n        store(sem, Semaphore.INDEX_VALUE, value);\n        return sem;\n    }\n    /**\n     * Acquires a permit, blocking until one is available\n     * @param sem The semaphore to wait on\n     * @note Uses atomic compare-exchange to safely decrement counter\n     * @note Efficiently waits when no permits are available\n     */\n    static wait(sem) {\n        for (;;) {\n            const value = load(sem, Semaphore.INDEX_VALUE);\n            if (value > 0) {\n                if (compareExchange(sem, Semaphore.INDEX_VALUE, value, value - 1) === value) {\n                    return;\n                }\n            }\n            else {\n                wait(sem, Semaphore.INDEX_VALUE, value);\n            }\n        }\n    }\n    /**\n     * Attempts to acquire a permit with a timeout\n     * @param sem The semaphore to wait on\n     * @param timestamp Absolute timeout timestamp in milliseconds\n     * @returns true if permit acquired, false if timed out\n     */\n    static timedWait(sem, timestamp) {\n        for (;;) {\n            const value = load(sem, Semaphore.INDEX_VALUE);\n            if (value > 0) {\n                if (compareExchange(sem, Semaphore.INDEX_VALUE, value, value - 1) === value) {\n                    return true;\n                }\n            }\n            else {\n                const timeout = timestamp - Date.now();\n                const waitResult = wait(sem, Semaphore.INDEX_VALUE, value, timeout);\n                if (waitResult === \"timed-out\") {\n                    return false;\n                }\n            }\n        }\n    }\n    /**\n     * Attempts to acquire a permit without blocking\n     * @param sem The semaphore to try\n     * @returns true if permit was acquired, false if no permits available\n     */\n    static tryWait(sem) {\n        for (;;) {\n            const value = load(sem, Semaphore.INDEX_VALUE);\n            if (value === 0) {\n                return false;\n            }\n            if (compareExchange(sem, Semaphore.INDEX_VALUE, value, value - 1) === value) {\n                return true;\n            }\n        }\n    }\n    /**\n     * Releases a permit back to the semaphore\n     * @param sem The semaphore to post to\n     * @throws {RangeError} If incrementing would exceed INT32_MAX_VALUE\n     * @note Wakes one waiting thread if counter transitions from 0 to 1\n     */\n    static post(sem) {\n        for (;;) {\n            const value = load(sem, Semaphore.INDEX_VALUE);\n            if (value === INT32_MAX_VALUE) {\n                throw new RangeError(\"maximum limit reached for semaphore value\");\n            }\n            if (compareExchange(sem, Semaphore.INDEX_VALUE, value, value + 1) === value) {\n                if (value === 0) {\n                    notify(sem, Semaphore.INDEX_VALUE, 1);\n                }\n                return;\n            }\n        }\n    }\n    /**\n     * Gets the current number of available permits\n     * @param sem The semaphore to check\n     * @returns Current semaphore value (number of available permits)\n     */\n    static getValue(sem) {\n        return load(sem, Semaphore.INDEX_VALUE);\n    }\n}\n// Index for the value in the shared array\nSemaphore.INDEX_VALUE = 0;\n//# sourceMappingURL=semaphore.js.map","import { Mutex } from \"./mutex\";\nconst { wait, notify } = Atomics;\n/**\n * A condition variable implementation for thread synchronization.\n * Allows threads to wait for some condition to become true while properly releasing\n * and reacquiring a mutex lock. Uses SharedArrayBuffer for cross-thread communication.\n */\nexport class Condition {\n    /**\n     * Initializes a new condition variable in shared memory\n     * @returns A new Int32Array backed by SharedArrayBuffer\n     */\n    static init() {\n        return new Int32Array(new SharedArrayBuffer(Int32Array.BYTES_PER_ELEMENT));\n    }\n    /**\n     * Wakes up one thread waiting on the condition variable\n     * @param cond The condition variable to signal\n     */\n    static signal(cond) {\n        notify(cond, 0, 1);\n    }\n    /**\n     * Wakes up all threads waiting on the condition variable\n     * @param cond The condition variable to broadcast to\n     */\n    static broadcast(cond) {\n        notify(cond, 0);\n    }\n    /**\n     * Blocks the current thread until the condition variable is signaled\n     * @param cond The condition variable to wait on\n     * @param mutex The associated mutex to release while waiting\n     * @param threadId The ID of the current thread\n     * @note Automatically releases mutex before waiting and reacquires after\n     */\n    static wait(cond, mutex, threadId) {\n        Mutex.unlock(mutex, threadId);\n        wait(cond, 0, 0);\n        Mutex.lock(mutex, threadId);\n    }\n    /**\n     * Blocks the current thread until either:\n     * - The condition variable is signaled, or\n     * - The specified timeout expires\n     * @param cond The condition variable to wait on\n     * @param mutex The associated mutex to release while waiting\n     * @param threadId The ID of the current thread\n     * @param timestamp The absolute timeout timestamp in milliseconds\n     * @returns true if the condition was signaled, false if timed out\n     * @note Automatically releases mutex before waiting and reacquires after\n     */\n    static timedWait(cond, mutex, threadId, timestamp) {\n        try {\n            Mutex.unlock(mutex, threadId);\n            return wait(cond, 0, 0, timestamp - Date.now()) !== \"timed-out\";\n        }\n        finally {\n            Mutex.lock(mutex, threadId);\n        }\n    }\n}\n//# sourceMappingURL=condition.js.map","import { Condition } from \"./condition\";\nimport { InvalidError } from \"./errors\";\nimport { Mutex } from \"./mutex\";\nconst { store, load, add } = Atomics;\n/**\n * A synchronization primitive that enables multiple threads to wait for each other\n * to reach a common execution point before continuing.\n *\n * Implements a reusable barrier using shared memory, mutex and condition variable.\n */\nexport class Barrier {\n    /**\n     * Initializes a new barrier with the specified thread count\n     * @param count Number of threads that must reach the barrier before continuing\n     * @returns Initialized BarrierObject with shared structures\n     * @throws {InvalidError} If count is not an integer\n     * @throws {RangeError} If count is <= 0\n     */\n    static init(count) {\n        Barrier.validateCount(count);\n        const barrier = new BigInt64Array(new SharedArrayBuffer(BigInt64Array.BYTES_PER_ELEMENT * 3));\n        store(barrier, Barrier.INDEX_COUNT, BigInt(count));\n        store(barrier, Barrier.INDEX_WAITED, 0n);\n        store(barrier, Barrier.INDEX_GENERATION, 0n);\n        const mutex = Mutex.init();\n        const cond = Condition.init();\n        return {\n            barrier,\n            mutex,\n            cond\n        };\n    }\n    /**\n     * Makes the calling thread wait at the barrier until all threads have arrived\n     * @param barrier The barrier object to wait on\n     * @param threadId Unique identifier for the calling thread\n     * @returns true if this thread was the last to arrive (releases others), false otherwise\n     */\n    static wait(barrier, threadId) {\n        Mutex.lock(barrier.mutex, threadId);\n        const generation = load(barrier.barrier, Barrier.INDEX_GENERATION);\n        const count = load(barrier.barrier, Barrier.INDEX_COUNT);\n        const waited = add(barrier.barrier, Barrier.INDEX_WAITED, 1n) + 1n;\n        try {\n            if (waited >= count) {\n                store(barrier.barrier, Barrier.INDEX_WAITED, 0n);\n                add(barrier.barrier, Barrier.INDEX_GENERATION, 1n);\n                Condition.broadcast(barrier.cond);\n                return true;\n            }\n            while (load(barrier.barrier, Barrier.INDEX_GENERATION) === generation) {\n                Condition.wait(barrier.cond, barrier.mutex, threadId);\n            }\n            return false;\n        }\n        finally {\n            Mutex.unlock(barrier.mutex, threadId);\n        }\n    }\n    /**\n     * Validates that the thread count is a positive integer\n     * @param count Number to validate\n     * @throws {InvalidError} If count is not an integer\n     * @throws {RangeError} If count is <= 0\n     */\n    static validateCount(count) {\n        if (!Number.isInteger(count)) {\n            throw new InvalidError(\"count should be integer\");\n        }\n        if (count <= 0) {\n            throw new RangeError(\"count should be greater zero\");\n        }\n    }\n}\n// Indexes for accessing different values in the barrier array\nBarrier.INDEX_COUNT = 0; // Stores total threads required\nBarrier.INDEX_WAITED = 1; // Stores number of threads currently waiting\nBarrier.INDEX_GENERATION = 2; // Stores current barrier generation\n//# sourceMappingURL=barrier.js.map","import { DeadlockError, InvalidError, PermissionError } from \"./errors.js\";\nimport { INT32_MAX_VALUE, INT32_MIN_VALUE } from \"./limits.js\";\nconst { compareExchange, store, load } = Atomics;\n/**\n * A spin lock implementation for low-level thread synchronization.\n * Uses busy-waiting with atomic operations for acquiring the lock.\n * More efficient than mutexes for very short critical sections.\n * Tracks owning thread to prevent deadlocks and enforce proper usage.\n */\nexport class SpinLock {\n    /**\n     * Initializes a new spin lock in shared memory\n     * @returns A new Int32Array backed by SharedArrayBuffer with:\n     *          - index 0: state (initially unlocked)\n     *          - index 1: owner (initially empty)\n     */\n    static init() {\n        const lock = new Int32Array(new SharedArrayBuffer(Int32Array.BYTES_PER_ELEMENT * 2));\n        store(lock, SpinLock.INDEX_STATE, SpinLock.STATE_UNLOCKED);\n        store(lock, SpinLock.INDEX_OWNER, SpinLock.OWNER_EMPTY);\n        return lock;\n    }\n    /**\n     * Acquires the lock, spinning until available\n     * @param lock The spin lock to acquire\n     * @param threadId Unique identifier for the calling thread\n     * @throws {DeadlockError} If thread already owns the lock\n     * @throws {InvalidError} If threadId is invalid\n     * @note Uses Atomics.pause() when available to reduce contention\n     */\n    static lock(lock, threadId) {\n        SpinLock.checkThreadIdBeforeLock(lock, threadId);\n        // Spin-wait loop with atomic compare-exchange\n        for (;;) {\n            // Attempt atomic acquisition\n            if (compareExchange(lock, SpinLock.INDEX_STATE, SpinLock.STATE_UNLOCKED, SpinLock.STATE_LOCKED) ===\n                SpinLock.STATE_UNLOCKED) {\n                store(lock, SpinLock.INDEX_OWNER, threadId);\n                return;\n            }\n            // Use pause instruction to reduce contention when available\n            // @ts-ignore\n            if (typeof Atomics.pause === \"function\") {\n                // @ts-ignore\n                Atomics.pause();\n            }\n        }\n    }\n    /**\n     * Attempts to acquire the lock without spinning\n     * @param lock The spin lock to try\n     * @param threadId Unique identifier for the calling thread\n     * @returns true if lock acquired, false if lock was busy\n     * @throws {DeadlockError} If thread already owns the lock\n     * @throws {InvalidError} If threadId is invalid\n     */\n    static tryLock(lock, threadId) {\n        SpinLock.checkThreadIdBeforeLock(lock, threadId);\n        if (compareExchange(lock, SpinLock.INDEX_STATE, SpinLock.STATE_UNLOCKED, SpinLock.STATE_LOCKED) ===\n            SpinLock.STATE_UNLOCKED) {\n            store(lock, SpinLock.INDEX_OWNER, threadId);\n            return true;\n        }\n        return false;\n    }\n    /**\n     * Releases the lock\n     * @param lock The spin lock to release\n     * @param threadId Unique identifier for the calling thread\n     * @throws {PermissionError} If thread doesn't own the lock or lock wasn't locked\n     * @throws {InvalidError} If threadId is invalid\n     */\n    static unlock(lock, threadId) {\n        SpinLock.checkThreadIdIsValid(threadId);\n        // Verify ownership\n        if (load(lock, SpinLock.INDEX_OWNER) !== threadId) {\n            throw new PermissionError(\"current thread is not owner of lock\");\n        }\n        // Clear owner first to prevent race conditions\n        store(lock, SpinLock.INDEX_OWNER, SpinLock.OWNER_EMPTY);\n        // Verify locked state while unlocking\n        if (compareExchange(lock, SpinLock.INDEX_STATE, SpinLock.STATE_LOCKED, SpinLock.STATE_UNLOCKED) ===\n            SpinLock.STATE_UNLOCKED) {\n            throw new PermissionError(\"lock was not locked\");\n        }\n    }\n    /**\n     * Validates threadId and checks for deadlock conditions before locking\n     * @param lock The spin lock being acquired\n     * @param threadId The thread attempting to lock\n     * @throws {DeadlockError} If thread already owns lock\n     * @throws {InvalidError} If threadId is invalid\n     */\n    static checkThreadIdBeforeLock(lock, threadId) {\n        SpinLock.checkThreadIdIsValid(threadId);\n        if (load(lock, SpinLock.INDEX_OWNER) === threadId) {\n            throw new DeadlockError(\"thread already owns this lock\");\n        }\n    }\n    /**\n     * Validates that a threadId is properly formatted and within range\n     * @param threadId The thread ID to validate\n     * @throws {InvalidError} If threadId is not an integer or is empty\n     * @throws {RangeError} If threadId is outside int32 range\n     */\n    static checkThreadIdIsValid(threadId) {\n        if (!Number.isInteger(threadId)) {\n            throw new InvalidError(\"threadId should be int32\");\n        }\n        if (threadId < INT32_MIN_VALUE || threadId > INT32_MAX_VALUE) {\n            throw new RangeError(\"threadId is out of int32 range\");\n        }\n        if (threadId === SpinLock.OWNER_EMPTY) {\n            throw new InvalidError(\"threadId is empty owner\");\n        }\n    }\n}\n// Constants for lock state management\nSpinLock.OWNER_EMPTY = 0; // Value indicating no owner\nSpinLock.STATE_UNLOCKED = 0; // Lock is available\nSpinLock.STATE_LOCKED = 1; // Lock is acquired\nSpinLock.INDEX_STATE = 0; // Index for state in array\nSpinLock.INDEX_OWNER = 1; // Index for owner in array\n//# sourceMappingURL=spinlock.js.map","const { compareExchange, store } = Atomics;\n/**\n * A synchronization primitive that ensures a function is executed only once,\n * even when called from multiple threads.\n * Uses atomic operations for thread-safe execution tracking.\n */\nexport class Once {\n    /**\n     * Initializes a new Once primitive in shared memory\n     * @returns A new Int32Array backed by SharedArrayBuffer initialized to NOT_EXECUTED\n     */\n    static init() {\n        const once = new Int32Array(new SharedArrayBuffer(Int32Array.BYTES_PER_ELEMENT));\n        store(once, Once.INDEX_EXECUTED, Once.EXECUTED_NO);\n        return once;\n    }\n    /**\n     * Executes the provided function exactly once, even if called from multiple threads\n     * @param once The Once primitive to use for synchronization\n     * @param fn The function to execute (will be called at most once)\n     * @note The function will be called by whichever thread wins the atomic race\n     */\n    static execute(once, fn) {\n        if (compareExchange(once, Once.INDEX_EXECUTED, Once.EXECUTED_NO, Once.EXECUTED_YES) === Once.EXECUTED_NO) {\n            fn();\n        }\n    }\n    /**\n     * Checks if the function has been executed\n     * @param once The Once primitive to check\n     * @returns true if the function has been executed, false otherwise\n     */\n    static isExecuted(once) {\n        return Atomics.load(once, Once.INDEX_EXECUTED) === Once.EXECUTED_YES;\n    }\n}\n// Index for the execution state in the shared array\nOnce.INDEX_EXECUTED = 0;\n// Possible execution states\nOnce.EXECUTED_NO = 0; // Function has not been executed\nOnce.EXECUTED_YES = 1; // Function has been executed\n//# sourceMappingURL=once.js.map"],"names":["DeadlockError","Error","constructor","message","super","this","name","PermissionError","InvalidError","INT32_MAX_VALUE","INT32_MIN_VALUE","compareExchange","wait","notify","store","load","Atomics","Mutex","init","mutex","Int32Array","SharedArrayBuffer","BYTES_PER_ELEMENT","INDEX_STATE","STATE_UNLOCKED","INDEX_OWNER","OWNER_EMPTY","lock","threadId","checkThreadIdBeforeLock","STATE_LOCKED","timedLock","timestamp","timeout","Date","now","tryLock","unlock","checkThreadIdIsValid","Number","isInteger","RangeError","Semaphore","value","sem","INDEX_VALUE","timedWait","tryWait","post","getValue","Condition","signal","cond","broadcast","add","Barrier","count","validateCount","barrier","BigInt64Array","INDEX_COUNT","BigInt","INDEX_WAITED","INDEX_GENERATION","generation","waited","SpinLock","pause","Once","once","INDEX_EXECUTED","EXECUTED_NO","execute","fn","EXECUTED_YES","isExecuted"],"mappings":"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"}