{"version":3,"file":"atomics-sync.umd.js","sources":["../es/errors.js","../es/limits.js","../es/mutex.js","../es/semaphore.js","../es/condition.js","../es/barrier.js","../es/spinlock.js","../es/once.js"],"sourcesContent":["export class DeadlockError extends Error {\n    constructor(message) {\n        super(message);\n        this.name = \"DeadlockError\";\n    }\n}\nexport class PermissionError extends Error {\n    constructor(message) {\n        super(message);\n        this.name = \"PermissionError\";\n    }\n}\nexport class InvalidError extends Error {\n    constructor(message) {\n        super(message);\n        this.name = \"InvalidError\";\n    }\n}\n//# sourceMappingURL=errors.js.map","export const INT32_MAX_VALUE = 2147483647;\nexport const INT32_MIN_VALUE = -2147483648;\n//# sourceMappingURL=limits.js.map","import { DeadlockError, InvalidError, PermissionError } from \"./errors.js\";\nimport { INT32_MAX_VALUE, INT32_MIN_VALUE } from \"./limits.js\";\nconst { compareExchange, wait, notify, store, load } = Atomics;\nexport class Mutex {\n    static init() {\n        const mutex = new Int32Array(new SharedArrayBuffer(Int32Array.BYTES_PER_ELEMENT * 2));\n        store(mutex, Mutex.INDEX_STATE, Mutex.STATE_UNLOCKED);\n        store(mutex, Mutex.INDEX_OWNER, Mutex.OWNER_EMPTY);\n        return mutex;\n    }\n    static lock(mutex, threadId) {\n        Mutex.checkThreadIdBeforeLock(mutex, threadId);\n        for (;;) {\n            if (compareExchange(mutex, Mutex.INDEX_STATE, Mutex.STATE_UNLOCKED, Mutex.STATE_LOCKED) === Mutex.STATE_UNLOCKED) {\n                store(mutex, Mutex.INDEX_OWNER, threadId);\n                return;\n            }\n            wait(mutex, Mutex.INDEX_STATE, Mutex.STATE_LOCKED);\n        }\n    }\n    static timedLock(mutex, threadId, timestamp) {\n        Mutex.checkThreadIdBeforeLock(mutex, threadId);\n        for (;;) {\n            if (compareExchange(mutex, Mutex.INDEX_STATE, Mutex.STATE_UNLOCKED, Mutex.STATE_LOCKED) === Mutex.STATE_UNLOCKED) {\n                store(mutex, Mutex.INDEX_OWNER, threadId);\n                return true;\n            }\n            const timeout = timestamp - Date.now();\n            const waitResult = wait(mutex, Mutex.INDEX_STATE, Mutex.STATE_LOCKED, timeout);\n            if (waitResult === \"timed-out\") {\n                return false;\n            }\n        }\n    }\n    static tryLock(mutex, threadId) {\n        Mutex.checkThreadIdBeforeLock(mutex, threadId);\n        if (compareExchange(mutex, Mutex.INDEX_STATE, Mutex.STATE_UNLOCKED, Mutex.STATE_LOCKED) === Mutex.STATE_UNLOCKED) {\n            store(mutex, Mutex.INDEX_OWNER, threadId);\n            return true;\n        }\n        return false;\n    }\n    static unlock(mutex, threadId) {\n        Mutex.checkThreadIdIsValid(threadId);\n        if (load(mutex, Mutex.INDEX_OWNER) !== threadId) {\n            throw new PermissionError(\"current thread is not owner of mutex\");\n        }\n        if (compareExchange(mutex, Mutex.INDEX_STATE, Mutex.STATE_LOCKED, Mutex.STATE_UNLOCKED) === Mutex.STATE_UNLOCKED) {\n            throw new PermissionError(\"mutex was not locked\");\n        }\n        store(mutex, Mutex.INDEX_OWNER, Mutex.OWNER_EMPTY);\n        notify(mutex, Mutex.INDEX_STATE, 1);\n    }\n    static checkThreadIdBeforeLock(mutex, threadId) {\n        Mutex.checkThreadIdIsValid(threadId);\n        if (load(mutex, Mutex.INDEX_OWNER) === threadId) {\n            throw new DeadlockError(\"thread already owns this mutex\");\n        }\n    }\n    static checkThreadIdIsValid(threadId) {\n        if (!Number.isInteger(threadId)) {\n            throw new InvalidError(\"threadId should be int32\");\n        }\n        if (threadId < INT32_MIN_VALUE || threadId > INT32_MAX_VALUE) {\n            throw new RangeError(\"threadId is out of int32 range\");\n        }\n        if (threadId === Mutex.OWNER_EMPTY) {\n            throw new InvalidError(\"threadId is empty owner\");\n        }\n    }\n}\nMutex.OWNER_EMPTY = 0;\nMutex.STATE_UNLOCKED = 0;\nMutex.STATE_LOCKED = 1;\nMutex.INDEX_STATE = 0;\nMutex.INDEX_OWNER = 1;\n//# sourceMappingURL=mutex.js.map","import { InvalidError } from \"./errors.js\";\nimport { INT32_MAX_VALUE } from \"./limits.js\";\nconst { compareExchange, wait, notify, store, load } = Atomics;\nexport class Semaphore {\n    static init(value) {\n        if (!Number.isInteger(value)) {\n            throw new InvalidError(\"initial value should be int32\");\n        }\n        if (value < 0 || value > INT32_MAX_VALUE) {\n            throw new RangeError(\"initial value should be greater or equal zero and less or equal maximum int32 value\");\n        }\n        const sem = new Int32Array(new SharedArrayBuffer(Int32Array.BYTES_PER_ELEMENT));\n        store(sem, Semaphore.INDEX_VALUE, value);\n        return sem;\n    }\n    static wait(sem) {\n        for (;;) {\n            const value = load(sem, Semaphore.INDEX_VALUE);\n            if (value > 0) {\n                if (compareExchange(sem, Semaphore.INDEX_VALUE, value, value - 1) === value) {\n                    return;\n                }\n            }\n            else {\n                wait(sem, Semaphore.INDEX_VALUE, value);\n            }\n        }\n    }\n    static timedWait(sem, timestamp) {\n        for (;;) {\n            const value = load(sem, Semaphore.INDEX_VALUE);\n            if (value > 0) {\n                if (compareExchange(sem, Semaphore.INDEX_VALUE, value, value - 1) === value) {\n                    return true;\n                }\n            }\n            else {\n                const timeout = timestamp - Date.now();\n                const waitResult = wait(sem, Semaphore.INDEX_VALUE, value, timeout);\n                if (waitResult === \"timed-out\") {\n                    return false;\n                }\n            }\n        }\n    }\n    static tryWait(sem) {\n        for (;;) {\n            const value = load(sem, Semaphore.INDEX_VALUE);\n            if (value === 0) {\n                return false;\n            }\n            if (compareExchange(sem, Semaphore.INDEX_VALUE, value, value - 1) === value) {\n                return true;\n            }\n        }\n    }\n    static post(sem) {\n        for (;;) {\n            const value = load(sem, Semaphore.INDEX_VALUE);\n            if (value === INT32_MAX_VALUE) {\n                throw new RangeError(\"maximum limit reached for semaphore value\");\n            }\n            if (compareExchange(sem, Semaphore.INDEX_VALUE, value, value + 1) === value) {\n                if (value === 0) {\n                    notify(sem, Semaphore.INDEX_VALUE, 1);\n                }\n                return;\n            }\n        }\n    }\n    static getValue(sem) {\n        return load(sem, Semaphore.INDEX_VALUE);\n    }\n}\nSemaphore.INDEX_VALUE = 0;\n//# sourceMappingURL=semaphore.js.map","import { Mutex } from \"./mutex\";\nconst { wait, notify } = Atomics;\nexport class Condition {\n    static init() {\n        return new Int32Array(new SharedArrayBuffer(Int32Array.BYTES_PER_ELEMENT));\n    }\n    static signal(cond) {\n        notify(cond, 0, 1);\n    }\n    static broadcast(cond) {\n        notify(cond, 0);\n    }\n    static wait(cond, mutex, threadId) {\n        Mutex.unlock(mutex, threadId);\n        wait(cond, 0, 0);\n        Mutex.lock(mutex, threadId);\n    }\n    static timedWait(cond, mutex, threadId, timestamp) {\n        try {\n            Mutex.unlock(mutex, threadId);\n            return wait(cond, 0, 0, timestamp - Date.now()) !== \"timed-out\";\n        }\n        finally {\n            Mutex.lock(mutex, threadId);\n        }\n    }\n}\n//# sourceMappingURL=condition.js.map","import { Condition } from \"./condition\";\nimport { InvalidError } from \"./errors\";\nimport { Mutex } from \"./mutex\";\nconst { store, load, add } = Atomics;\nexport class Barrier {\n    static init(count) {\n        Barrier.validateCount(count);\n        const barrier = new BigInt64Array(new SharedArrayBuffer(BigInt64Array.BYTES_PER_ELEMENT * 3));\n        store(barrier, Barrier.INDEX_COUNT, BigInt(count));\n        store(barrier, Barrier.INDEX_WAITED, 0n);\n        store(barrier, Barrier.INDEX_GENERATION, 0n);\n        const mutex = Mutex.init();\n        const cond = Condition.init();\n        return {\n            barrier,\n            mutex,\n            cond\n        };\n    }\n    static wait(barrier, threadId) {\n        Mutex.lock(barrier.mutex, threadId);\n        const generation = load(barrier.barrier, Barrier.INDEX_GENERATION);\n        const count = load(barrier.barrier, Barrier.INDEX_COUNT);\n        const waited = add(barrier.barrier, Barrier.INDEX_WAITED, 1n) + 1n;\n        try {\n            if (waited >= count) {\n                store(barrier.barrier, Barrier.INDEX_WAITED, 0n);\n                add(barrier.barrier, Barrier.INDEX_GENERATION, 1n);\n                Condition.broadcast(barrier.cond);\n                return true;\n            }\n            while (load(barrier.barrier, Barrier.INDEX_GENERATION) === generation) {\n                Condition.wait(barrier.cond, barrier.mutex, threadId);\n            }\n            return false;\n        }\n        finally {\n            Mutex.unlock(barrier.mutex, threadId);\n        }\n    }\n    static validateCount(count) {\n        if (!Number.isInteger(count)) {\n            throw new InvalidError(\"count should be integer\");\n        }\n        if (count <= 0) {\n            throw new RangeError(\"count should be greater zero\");\n        }\n    }\n}\nBarrier.INDEX_COUNT = 0;\nBarrier.INDEX_WAITED = 1;\nBarrier.INDEX_GENERATION = 2;\n//# sourceMappingURL=barrier.js.map","import { DeadlockError, InvalidError, PermissionError } from \"./errors.js\";\nimport { INT32_MAX_VALUE, INT32_MIN_VALUE } from \"./limits.js\";\nconst { compareExchange, store, load } = Atomics;\nexport class SpinLock {\n    static init() {\n        const lock = new Int32Array(new SharedArrayBuffer(Int32Array.BYTES_PER_ELEMENT * 2));\n        store(lock, SpinLock.INDEX_STATE, SpinLock.STATE_UNLOCKED);\n        store(lock, SpinLock.INDEX_OWNER, SpinLock.OWNER_EMPTY);\n        return lock;\n    }\n    static lock(lock, threadId) {\n        SpinLock.checkThreadIdBeforeLock(lock, threadId);\n        for (;;) {\n            if (compareExchange(lock, SpinLock.INDEX_STATE, SpinLock.STATE_UNLOCKED, SpinLock.STATE_LOCKED) ===\n                SpinLock.STATE_UNLOCKED) {\n                store(lock, SpinLock.INDEX_OWNER, threadId);\n                return;\n            }\n            // @ts-ignore\n            if (typeof Atomics.pause === \"function\") {\n                // @ts-ignore\n                Atomics.pause();\n            }\n        }\n    }\n    static tryLock(lock, threadId) {\n        SpinLock.checkThreadIdBeforeLock(lock, threadId);\n        if (compareExchange(lock, SpinLock.INDEX_STATE, SpinLock.STATE_UNLOCKED, SpinLock.STATE_LOCKED) ===\n            SpinLock.STATE_UNLOCKED) {\n            store(lock, SpinLock.INDEX_OWNER, threadId);\n            return true;\n        }\n        return false;\n    }\n    static unlock(lock, threadId) {\n        SpinLock.checkThreadIdIsValid(threadId);\n        if (load(lock, SpinLock.INDEX_OWNER) !== threadId) {\n            throw new PermissionError(\"current thread is not owner of lock\");\n        }\n        if (compareExchange(lock, SpinLock.INDEX_STATE, SpinLock.STATE_LOCKED, SpinLock.STATE_UNLOCKED) ===\n            SpinLock.STATE_UNLOCKED) {\n            throw new PermissionError(\"lock was not locked\");\n        }\n        store(lock, SpinLock.INDEX_OWNER, SpinLock.OWNER_EMPTY);\n    }\n    static checkThreadIdBeforeLock(lock, threadId) {\n        SpinLock.checkThreadIdIsValid(threadId);\n        if (load(lock, SpinLock.INDEX_OWNER) === threadId) {\n            throw new DeadlockError(\"thread already owns this lock\");\n        }\n    }\n    static checkThreadIdIsValid(threadId) {\n        if (!Number.isInteger(threadId)) {\n            throw new InvalidError(\"threadId should be int32\");\n        }\n        if (threadId < INT32_MIN_VALUE || threadId > INT32_MAX_VALUE) {\n            throw new RangeError(\"threadId is out of int32 range\");\n        }\n        if (threadId === SpinLock.OWNER_EMPTY) {\n            throw new InvalidError(\"threadId is empty owner\");\n        }\n    }\n}\nSpinLock.OWNER_EMPTY = 0;\nSpinLock.STATE_UNLOCKED = 0;\nSpinLock.STATE_LOCKED = 1;\nSpinLock.INDEX_STATE = 0;\nSpinLock.INDEX_OWNER = 1;\n//# sourceMappingURL=spinlock.js.map","const { compareExchange, store } = Atomics;\nexport class Once {\n    static init() {\n        const once = new Int32Array(new SharedArrayBuffer(Int32Array.BYTES_PER_ELEMENT));\n        store(once, Once.INDEX_EXECUTED, Once.EXECUTED_NO);\n        return once;\n    }\n    static execute(once, fn) {\n        if (compareExchange(once, Once.INDEX_EXECUTED, Once.EXECUTED_NO, Once.EXECUTED_YES) === Once.EXECUTED_NO) {\n            fn();\n        }\n    }\n    static isExecuted(once) {\n        return Atomics.load(once, Once.INDEX_EXECUTED) === Once.EXECUTED_YES;\n    }\n}\nOnce.INDEX_EXECUTED = 0;\nOnce.EXECUTED_NO = 0;\nOnce.EXECUTED_YES = 1;\n//# sourceMappingURL=once.js.map"],"names":["compareExchange","wait","notify","store","load"],"mappings":"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"}